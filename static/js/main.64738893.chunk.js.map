{"version":3,"sources":["components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-selectors.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","reportWebVitals.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","dispatch","a","get","data","name","number","contact","post","then","catch","error","id","delete","connect","state","contacts","addContact","contactsOperations","useState","setName","setNumber","handleChange","e","target","value","onSubmit","preventDefault","isDublicate","map","item","toLowerCase","alert","isDuplicate","type","placeholder","onChange","loading","filter","contactsSelectors","className","s","Filter","deleteContact","includes","onClick","isLoadingContact","fetchContacts","useEffect","createReducer","_","payload","action","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64738893.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter\":\"Filter_Filter__13gOn\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\nexport const fetchContactError = createAction('contacts/fetchContactError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import axios from 'axios';\n\nimport {\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:4040/';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactRequest());\n\n  //   axios\n  //     .get('/contacts')\n  //     .then(({ data }) => dispatch(fetchContactSuccess(data)))\n  //     .catch(error => dispatch(fetchContactError(error)));\n\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactError(error));\n  }\n};\n\nconst addContact = (name, number) => dispatch => {\n  const contact = { name, number };\n\n  dispatch(addContactRequest());\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch(error => dispatch(addContactError(error)));\n};\n\nconst deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n\nexport default { fetchContacts, addContact, deleteContact };\n","import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contacts/contacts-operations';\nimport s from './ContactForm.module.css';\n\nfunction ContactForm({ contacts, addContact }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const inputName = e.target.name;\n\n    switch (inputName) {\n      case 'name':\n        setName(e.target.value);\n        break;\n\n      case 'number':\n        setNumber(e.target.value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const resetState = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const isDuplicate = () => {\n    let isDublicate = false;\n\n    contacts.map(item => {\n      if (item.name.toLowerCase() === name.toLowerCase()) {\n        alert(`${item.name} is already in contacts.`);\n        isDublicate = true;\n      }\n    });\n\n    return isDublicate;\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (name && number && !isDuplicate()) {\n      addContact(name, number);\n      resetState();\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          name=\"name\"\n          type=\"text\"\n          placeholder=\"Enter name\"\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n\n      <label>\n        Phone number\n        <input\n          name=\"number\"\n          type=\"number\"\n          placeholder=\"Enter number\"\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nconst mapStateToProps = state => ({\n  contacts: state.contacts.contacts,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addContact: (name, number) =>\n    dispatch(contactsOperations.addContact(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getLoading = state => state.contacts.loading;\n\nconst getFilter = state => state.contacts.filter;\n\nconst getContacts = state => state.contacts.contacts;\n\n// const getVisibleContacts = state => {\n//   const contacts = getContacts(state);\n//   const filter = getFilter(state);\n// };\n\nexport default { getLoading, getFilter, getContacts };\n","import { connect } from 'react-redux';\n\n// import { changeFilter } from '../../redux/contacts/contacts-actions';\n// import contactsSelectors from '../../redux/contacts/contacts-selectors';\nimport { contactsSelectors, changeFilter } from '../../redux/contacts';\n\nimport s from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    Find contact by name\n    <input\n      className={s.Filter}\n      name=\"filter\"\n      type=\"text\"\n      placeholder=\"Enter to find\"\n      value={value}\n      onChange={onChange}\n    />\n  </label>\n);\n\nconst mapStateToProps = state => ({\n  value: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { connect } from 'react-redux';\n// import contactsOperations from '../../redux/contacts/contacts-operations';\n// import contactsSelectors from '../../redux/contacts/contacts-selectors';\n\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\n\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, filter, deleteContact }) => (\n  <ul>\n    {contacts.map(\n      item =>\n        item.name.toLowerCase().includes(filter.toLowerCase()) && (\n          <li key={item.id}>\n            {item.name}: {item.number}{' '}\n            <button id={item.id} type=\"button\" onClick={deleteContact}>\n              Delete\n            </button>\n          </li>\n        ),\n    )}\n  </ul>\n);\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getContacts(state),\n  filter: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteContact: e => dispatch(contactsOperations.deleteContact(e.target.id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import { connect } from 'react-redux';\nimport { useEffect } from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\n// import contactsOperations from './redux/contacts/contacts-operations';\n// import contactsSelectors from './redux/contacts/contacts-selectors';\n\nimport { contactsOperations, contactsSelectors } from './redux/contacts';\n\nimport './App.css';\n\nfunction App({ fetchContacts, isLoadingContact }) {\n  useEffect(() => {\n    fetchContacts();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <h2>Phonebook</h2>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      {isLoadingContact && <h3>Завантажуємо...</h3>}\n      {!isLoadingContact && (\n        <div className=\"contacts\">\n          <Filter />\n          <ContactList />\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  isLoadingContact: contactsSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n\nimport {\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n} from './contacts-actions';\n\nconst contacts = createReducer([], {\n  [fetchContactSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, action) => {\n    const newContacts = [...state, action.payload];\n\n    return newContacts;\n  },\n\n  [deleteContactSuccess]: (state, action) => {\n    const filteredContacts = state.filter(\n      contact => contact.id !== action.payload,\n    );\n\n    return filteredContacts;\n  },\n});\n\nconst loading = createReducer(false, {\n  [fetchContactRequest]: () => true,\n  [fetchContactSuccess]: () => false,\n  [fetchContactError]: () => false,\n\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, action) => action.payload, // _ — так позначається параметр, який не використовується\n});\n\nconst error = createReducer(null, {});\n\nexport default combineReducers({ contacts, filter, loading, error });\n","import { createStore } from 'redux';\n\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n\nimport logger from 'redux-logger';\n\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport storage from 'redux-persist/lib/storage';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n\n  middleware, //middleware: middleware\n\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// const persistor = persistStore(store);\n\nexport default store;\n// { store, persistor };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* {store.store}> */}\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}